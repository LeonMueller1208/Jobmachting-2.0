generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Applicant {
  id         String     @id @default(cuid())
  name       String
  email      String     @unique
  skills     Json
  location   String
  experience Int
  bio        String?
  industry   String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  interests  Interest[]
  chats      Chat[]
}

model Company {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  industry  String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobs      Job[]
  chats     Chat[]
}

model Job {
  id             String     @id @default(cuid())
  title          String
  description    String
  requiredSkills Json
  location       String
  minExperience  Int
  companyId      String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  industry       String?
  interests      Interest[]
  chats          Chat[]
  company        Company    @relation(fields: [companyId], references: [id])
}

model Interest {
  id          String    @id @default(cuid())
  applicantId String
  jobId       String
  status      String
  matchScore  Float
  passes      Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  job         Job       @relation(fields: [jobId], references: [id])
  applicant   Applicant @relation(fields: [applicantId], references: [id])

  @@unique([applicantId, jobId])
}

model Chat {
  id          String    @id @default(cuid())
  applicantId String
  companyId   String
  jobId       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  company     Company   @relation(fields: [companyId], references: [id])
  job         Job       @relation(fields: [jobId], references: [id])

  @@unique([applicantId, companyId, jobId])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  senderId  String
  senderType String // "applicant" or "company"
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}
